---
title: "Stats + Plots II"
author: "solutions"
format: html
---

# Packages

```{r}
#| message: false
#| warning: false
library(tidyverse)
library(palmerpenguins)
```

# Data

We are going to use the `penguins` data set in the `palmerpenguins` Pull up the help file, and read more about the penguins we are going to study!

Let's remind ourselves the variable names, numbers of rows, etc. that we are working with by taking a glimpse of the data set below.

```{r}

glimpse(penguins)

```

## Writing in-line code

In-line code is code that can executed in the middle of text that you write!

The syntax uses single backticks (\`) followed by the letter r to tell Quarto we are writing R code. This is often useful when using short functions to describe aspects of a data set:

-- nrow()

-- ncol()

Why would we want to write in-line code?

```{r}
penguins |>
  mutate(body_mass_g = as.double(body_mass_g))
```


So how do we do it? See the example below..

The number of rows in the penguins data set is `r nrow(penguins)`! The number of columns in the penguins data set is `r ncol(penguins)`.

## Arguments

Using the `penguins` data set, calculate the mean bill length for EACH of the three species of penguins.

```{r}

penguins |>
  group_by(species) |>
  summarise(nbill = mean(bill_length_mm, na.rm = T))

```


# ggplot

As a reminder, here is the link for all your [geoms](https://ggplot2.tidyverse.org/reference/)!

## Histogram

Make a histogram! Set an appropriate binwidth. Hint: you can run names(data.set) in your console if you need a quick reminder on the variable names.

To do this, we are going to use `geom_histogram()`. Pull up the help file for `geom_histogram()` to find how to set a binwidth.

```{r}


```

## Scatterplot

We are going to create a scatterplot to look at the relationship between a penguin's weight and flipper length! What geom can we use to make a scatter plot?


```{r}



```

Note: aesthetic is a visual property of one of the objects in your plot. Aesthetic options are:

-- shape

-- color

-- size

-- fill

**Question**: What happens if we put color as an argument in our `geom` instead of our `aes`?

## Formatting 

What if your legend goes off the page (this may be an issue on your project....)? We can approach a solution using the `guides()` function. See the following code below:

`guides(color = guide_legend(ncol = 2))`

Talk through the code, and then add it to your scatterplot code above. 

For an additional resource, please see [here](https://www.tidyverse.org/blog/2024/02/ggplot2-3-5-0-legends/)


## Labels

Good labels are critical for making your plots accessible to a wider audience. Always ensure the axis and legend labels display the full variable name.

`labs()` is the function. Common arguments to set are:

-- x

-- y

-- title

-- subtitle

-- caption

What if your axis labels are long? Sometimes, it's better for us to rotate them! We can do that using the `theme()` function. Within the theme function, let's try: `theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))`

```{r}

```


What if your title is too long? We can fix this by putting `\n` in your title text. Try it!


## Other stuff 

We can use the `theme()` function for a lot of things. For example, we can use it to change the color of text, make stuff bold, and more. We can "save our open theme", and then add it to the scatterplot! Check out the following code below

```{r}
wolftheme <- theme(
  plot.title = element_text(family = "Helvetica", face = "bold", size = (30)),
  legend.title = element_text(colour = "red", face = "bold.italic", family = "Helvetica"),
  legend.text = element_text(face = "italic", colour = "darkred", family = "Helvetica"),
  axis.title = element_text(family = "Helvetica", size = (10), colour = "darkred"),
  axis.text = element_text(family = "Courier", colour = "black", size = (10))
)

# save your scatterplot as a R object and add the wolf theme to it using the +
```


# Break apart a plot by a variable

What if we donâ€™t want the overlap? We can use `facet_wrap()` to split the plot apart! This function takes the name of the variable you want to split by, and how many cols/rows you want your plots to show up in. Note: the syntax for this function is \~variable.name.

Run ?facet_wrap in your console to see the name of the row and column arguments within facet_wrap().

Add `facet_wrap()` *as a layer on your ggplot* below, breaking the plot apart by species.

```{r}
penguins |>
  ggplot( 
       aes(x = body_mass_g, fill = species)) +
       geom_histogram(binwidth = 200, alpha = .5)
  # insert code here
```

## Break apart by more than one variable?

Now, lets make a scatter plot between bill length and bill depth. Color the points by species and shape the points by island.


Here, we are going to introduce `facet_grid()`. It's a lot like `facet_wrap()`, but allows us to break our plots apart by \> 1 variable. The syntax for `facet_grid()` is `variable1 ~ variable 2`. Try breaking the plot above by both species AND island.

```{r}

```


For more information on the difference, please reference the following [stackoverflow link](https://stackoverflow.com/questions/20457905/whats-the-difference-between-facet-wrap-and-facet-grid-in-ggplot2)

## Fill vs color

Change fill to color below and re-run the code. What happened?

```{r}
penguins |>
  ggplot( 
       aes(x = body_mass_g, fill = species )) +
       geom_histogram(binwidth = 200, alpha = .7) +
       facet_wrap(~species, nrow = 3)
```

Generally, fill defines the color with which a geom is filled, whereas color defines the color with which a geom is outlined! However, there is one exception to the rule... points!

Most points plotted are considered too small to have meaningful area inside.... so fill won't work! Try it below!

```{r}
penguins |>
  ggplot(
    aes(x = bill_length_mm, bill_depth_mm , color = species)
  ) + 
  geom_point()
```

fill and color do act differently when the points have a "border". Shapes 21-25 are shapes that have a border. Use the shape argument within the `geom_point()` function to change the shape, and see how it interacts with `fill` and `color`.

While you are playing around with shape, take a look at the `geom_point()` help file to see other arguments you can override. How about size?

## Color

We can use pre-built or custom color paletts in R. Let's talk first about useful pre-built paletts.

#### Viridis colour scales

The viridis scales provide colour maps that are perceptually uniform in both colour and black-and-white. They are also designed to be perceived by viewers with common forms of colour blindness. You can find the help file [here](https://ggplot2.tidyverse.org/reference/scale_viridis.html)

Before moving on, we need to understand:

1. When to use _c vs _d
2. When to use scale_color vs scale_fill

```{r}
penguins |>
  ggplot(
    aes(x = bill_length_mm, bill_depth_mm , color = species)
  ) + 
  geom_point() + 
  scale_color_viridis_d()
```

```{r}
penguins |>
  ggplot(
    aes(x = bill_length_mm, bill_depth_mm , color = flipper_length_mm)
  ) + 
  geom_point() +
  scale_color_viridis_c()
```

This is a great resource for more palettes! [Link](https://www.sthda.com/english/wiki/ggplot2-colors-how-to-change-colors-automatically-and-manually)

#### Making your own 

We can also make our own color pallet using `scale_color_manual()`. We can supply the values via HEX code. Here is a link to find the colors you are looking for: https://htmlcolorcodes.com/

You can also specify colors by their name. Let's try this below. 

```{r}
penguins |>
  ggplot(
    aes(x = bill_length_mm, bill_depth_mm , color = species)
  ) + 
  geom_point() + 
  scale_color_manual(values=c("#999999", "red", "#56B4E9"))
```

We can use `scale_color_gradient()` when working with a continuous variable! Let's try it below.

```{r}
penguins |>
  ggplot(
    aes(x = bill_length_mm, bill_depth_mm , color = flipper_length_mm)
  ) + 
  geom_point() +
  scale_color_gradient(low="blue", high="red")
```

## Layers

Recreate the image on the slide!

Hint: we can use `theme(legend.position = "gone")` to remove the legend. The plot uses `theme_minimal()`.

```{r}


```
